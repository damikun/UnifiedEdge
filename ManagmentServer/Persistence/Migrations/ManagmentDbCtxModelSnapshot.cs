// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ManagmentDbCtx))]
    partial class ManagmentDbCtxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("Domain.Edge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Edge");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Guid = "7cb93bd4-de07-49b0-b9b8-ee0deb1cd301",
                            Name = "Undefined"
                        });
                });

            modelBuilder.Entity("Server.Domain.ServerBase", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Server.Domain.MqttServer", b =>
                {
                    b.HasBaseType("Server.Domain.ServerBase");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.ToTable("MqttServer", (string)null);
                });

            modelBuilder.Entity("Server.Domain.OpcServer", b =>
                {
                    b.HasBaseType("Server.Domain.ServerBase");

                    b.ToTable("OpcServer", (string)null);
                });

            modelBuilder.Entity("Server.Domain.MqttServer", b =>
                {
                    b.HasOne("Server.Domain.ServerBase", null)
                        .WithOne()
                        .HasForeignKey("Server.Domain.MqttServer", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Domain.OpcServer", b =>
                {
                    b.HasOne("Server.Domain.ServerBase", null)
                        .WithOne()
                        .HasForeignKey("Server.Domain.OpcServer", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
